receivers:
  otlp:
    protocols:
      grpc:
      http:

connectors:
  forward:
  servicegraph:
    latency_histogram_buckets: [ 1,2,3,4,5 ]
    dimensions:
      - dimension-1
      - dimension-2
    store:
      ttl: 1s
      max_items: 10
  spanmetrics:
    histogram:
      explicit:
        buckets: [ 100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms ]
    dimensions:
      - name: http.method
        default: GET
      - name: http.status_code
    exclude_dimensions: [ 'status.code' ]
    dimensions_cache_size: 1000
    aggregation_temporality: "AGGREGATION_TEMPORALITY_CUMULATIVE"
    metrics_flush_interval: 15s
processors:
  probabilistic_sampler:
    hash_seed: 22
    sampling_percentage: 50

  tail_sampling:
    policies: [
      {
        name: test-policy-4,
        type: probabilistic,
        probabilistic: { hash_salt: "custom-salt", sampling_percentage: 50 }
      },
    ]
exporters:
  logging:
    verbosity: detailed
  otlphttp:
    endpoint: http://tempo:4418

  prometheusremotewrite:
    endpoint: http://prometheus:9090/api/v1/write
    target_info:
      enabled: true

service:
  pipelines:
    traces:
      receivers: [otlp]
      exporters: [servicegraph, spanmetrics, forward]
    traces/grafanacloud:
      receivers: [forward]
      processors: [tail_sampling]
      exporters: [otlphttp]
    metrics/servicegraph:
      receivers: [ servicegraph, spanmetrics ]
      exporters: [ prometheusremotewrite ]
    logs:
      receivers: [otlp]
      exporters: [logging]
